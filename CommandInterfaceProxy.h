/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp CommandInterface.xml -p CommandInterfaceProxy -i CommandInterface.h -N -c CommandInterface
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef COMMANDINTERFACEPROXY_H
#define COMMANDINTERFACEPROXY_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "CommandInterface.h"

/*
 * Proxy class for interface org.genivi.audiomanager.commandinterface
 */
class CommandInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.genivi.audiomanager.commandinterface"; }

public:
    CommandInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~CommandInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<short, ushort> Connect(ushort sourceID, ushort sinkID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sourceID) << QVariant::fromValue(sinkID);
        return asyncCallWithArgumentList(QStringLiteral("Connect"), argumentList);
    }
    inline QDBusReply<short> Connect(ushort sourceID, ushort sinkID, ushort &mainConnectionID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sourceID) << QVariant::fromValue(sinkID);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("Connect"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            mainConnectionID = qdbus_cast<ushort>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short> Disconnect(ushort mainConnectionID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mainConnectionID);
        return asyncCallWithArgumentList(QStringLiteral("Disconnect"), argumentList);
    }

    inline QDBusPendingReply<short, QList<am::am_MainConnectionType_s> > GetListMainConnections()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetListMainConnections"), argumentList);
    }
    inline QDBusReply<short> GetListMainConnections(QList<am::am_MainConnectionType_s> &listConnections)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetListMainConnections"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            listConnections = qdbus_cast<QList<am::am_MainConnectionType_s> >(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short, QList<am::am_SoundProperty_s> > GetListMainSinkSoundProperties(ushort sinkID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sinkID);
        return asyncCallWithArgumentList(QStringLiteral("GetListMainSinkSoundProperties"), argumentList);
    }
    inline QDBusReply<short> GetListMainSinkSoundProperties(ushort sinkID, QList<am::am_SoundProperty_s> &listSoundProperties)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sinkID);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetListMainSinkSoundProperties"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            listSoundProperties = qdbus_cast<QList<am::am_SoundProperty_s> >(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short, QList<am::am_SinkType_s> > GetListMainSinks()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetListMainSinks"), argumentList);
    }
    inline QDBusReply<short> GetListMainSinks(QList<am::am_SinkType_s> &listMainSinks)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetListMainSinks"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            listMainSinks = qdbus_cast<QList<am::am_SinkType_s> >(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short, QList<am::am_MainSoundProperty_s> > GetListMainSourceSoundProperties(ushort sourceID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sourceID);
        return asyncCallWithArgumentList(QStringLiteral("GetListMainSourceSoundProperties"), argumentList);
    }
    inline QDBusReply<short> GetListMainSourceSoundProperties(ushort sourceID, QList<am::am_MainSoundProperty_s> &listSourceProperties)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sourceID);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetListMainSourceSoundProperties"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            listSourceProperties = qdbus_cast<QList<am::am_MainSoundProperty_s> >(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short, QList<am::am_SourceType_s> > GetListMainSources()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetListMainSources"), argumentList);
    }
    inline QDBusReply<short> GetListMainSources(QList<am::am_SourceType_s> &listMainSources)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetListMainSources"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            listMainSources = qdbus_cast<QList<am::am_SourceType_s> >(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short, QList<am::am_SinkClass_s> > GetListSinkClasses()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetListSinkClasses"), argumentList);
    }
    inline QDBusReply<short> GetListSinkClasses(QList<am::am_SinkClass_s> &listSinkClasses)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetListSinkClasses"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            listSinkClasses = qdbus_cast<QList<am::am_SinkClass_s> >(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short, QList<am::am_NotificationConfiguration_s> > GetListSinkMainNotificationConfigurations(ushort sinkID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sinkID);
        return asyncCallWithArgumentList(QStringLiteral("GetListSinkMainNotificationConfigurations"), argumentList);
    }
    inline QDBusReply<short> GetListSinkMainNotificationConfigurations(ushort sinkID, QList<am::am_NotificationConfiguration_s> &listMainNotificationConfigurations)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sinkID);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetListSinkMainNotificationConfigurations"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            listMainNotificationConfigurations = qdbus_cast<QList<am::am_NotificationConfiguration_s> >(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short, QList<am::am_SourceClass_s> > GetListSourceClasses()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetListSourceClasses"), argumentList);
    }
    inline QDBusReply<short> GetListSourceClasses(QList<am::am_SourceClass_s> &listSourceClasses)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetListSourceClasses"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            listSourceClasses = qdbus_cast<QList<am::am_SourceClass_s> >(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short, QList<am::am_NotificationConfiguration_s> > GetListSourceMainNotificationConfigurations(ushort sourceID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sourceID);
        return asyncCallWithArgumentList(QStringLiteral("GetListSourceMainNotificationConfigurations"), argumentList);
    }
    inline QDBusReply<short> GetListSourceMainNotificationConfigurations(ushort sourceID, QList<am::am_NotificationConfiguration_s> &listMainNotificationConfigurations)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sourceID);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetListSourceMainNotificationConfigurations"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            listMainNotificationConfigurations = qdbus_cast<QList<am::am_NotificationConfiguration_s> >(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short, QList<am::am_SystemProperty_s> > GetListSystemProperties()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetListSystemProperties"), argumentList);
    }
    inline QDBusReply<short> GetListSystemProperties(QList<am::am_SystemProperty_s> &listSystemProperties)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetListSystemProperties"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            listSystemProperties = qdbus_cast<QList<am::am_SystemProperty_s> >(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short, short> GetTimingInformation(ushort mainConnectionID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mainConnectionID);
        return asyncCallWithArgumentList(QStringLiteral("GetTimingInformation"), argumentList);
    }
    inline QDBusReply<short> GetTimingInformation(ushort mainConnectionID, short &delay)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mainConnectionID);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetTimingInformation"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            delay = qdbus_cast<short>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<short> SetMainSinkSoundProperty(ushort sinkID, am::am_MainSoundProperty_s soundProperty)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sinkID) << QVariant::fromValue(soundProperty);
        return asyncCallWithArgumentList(QStringLiteral("SetMainSinkSoundProperty"), argumentList);
    }

    inline QDBusPendingReply<short> SetMainSourceSoundProperty(ushort sourceID, am::am_MainSoundProperty_s soundProperty)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sourceID) << QVariant::fromValue(soundProperty);
        return asyncCallWithArgumentList(QStringLiteral("SetMainSourceSoundProperty"), argumentList);
    }

    inline QDBusPendingReply<short> SetSinkMuteState(ushort sinkID, short muteState)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sinkID) << QVariant::fromValue(muteState);
        return asyncCallWithArgumentList(QStringLiteral("SetSinkMuteState"), argumentList);
    }

    inline QDBusPendingReply<short> SetSystemProperty(am::am_SystemProperty_s property)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(property);
        return asyncCallWithArgumentList(QStringLiteral("SetSystemProperty"), argumentList);
    }

    inline QDBusPendingReply<short> SetVolume(ushort sinkID, short volume)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sinkID) << QVariant::fromValue(volume);
        return asyncCallWithArgumentList(QStringLiteral("SetVolume"), argumentList);
    }

    inline QDBusPendingReply<short> VolumeStep(ushort sinkID, short volumeStep)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sinkID) << QVariant::fromValue(volumeStep);
        return asyncCallWithArgumentList(QStringLiteral("VolumeStep"), argumentList);
    }

    inline QDBusPendingReply<short> setMainSinkNotificationConfiguration(ushort sinkID, am::am_NotificationConfiguration_s mainNotificationConfiguration)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sinkID) << QVariant::fromValue(mainNotificationConfiguration);
        return asyncCallWithArgumentList(QStringLiteral("setMainSinkNotificationConfiguration"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void MainConnectionStateChanged(ushort connectionID, short connectionState);
    void MainSinkSoundPropertyChanged(ushort sinkID, am::am_SoundProperty_s SoundProperty);
    void MainSourceSoundPropertyChanged(ushort sourceID, am::am_SoundProperty_s SoundProperty);
    void NewMainConnection(am::am_MainConnectionType_s mainConnection);
    void NumberOfSinkClassesChanged();
    void NumberOfSourceClassesChanged();
    void RemovedMainConnection(ushort mainConnectionId);
    void SinkAdded(am::am_SinkType_s newSink);
    void SinkAvailabilityChanged(ushort sinkID, am::am_Availability_s availability);
    void SinkMainNotificationConfigurationChanged(ushort sinkID, am::am_NotificationConfiguration_s mainNotificationConfiguration);
    void SinkMuteStateChanged(ushort sinkID, short muteState);
    void SinkNotification(ushort sinkID, am::am_NotificationPayload_s notificationPayload);
    void SinkRemoved(ushort removedSinkID);
    void SinkUpdated(ushort sinkID, ushort sinkClassID, const QList<am::am_MainSoundProperty_s> &listMainSinkProperties);
    void SourceAdded(am::am_SourceType_s newSource);
    void SourceAvailabilityChanged(ushort sourceID, am::am_Availability_s availability);
    void SourceMainNotificationConfigurationChanged(ushort sourceID, am::am_NotificationConfiguration_s mainNotificationConfiguration);
    void SourceNotification(ushort sourceID, am::am_NotificationPayload_s notificationPayload);
    void SourceRemoved(ushort removedSourceID);
    void SourceUpdated(ushort sourceID, ushort sourceClassID, const QList<am::am_MainSoundProperty_s> &listMainSinkProperties);
    void SystemPropertyChanged(am::am_SystemProperty_s SystemProperty);
    void TimingInformationChanged(ushort mainConnection, short time);
    void VolumeChanged(ushort sinkID, short volume);
};

#endif
